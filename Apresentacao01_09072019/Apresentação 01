Apresentação 01
- Github
	Controle de versão
		Versões diferentes facilitam a volta para um estado anterior do sistema, após a detecção de algum bug
		ou da necessidade de desfazer alguma alteração.
	Github
		Serviço web compartilhado para armazenar projetos que usam o git para controle de versão.
		Funciona também como uma rede social, onde todos os usuários têm acesso aos repositórios públicos.

	Milestone => A funcionalidade milestone (etapa em Português) serve para agrupar issues e pull requests á volta
	de uma etapa. Assim pode ter-se um registo de que coisas precisam de estar resolvidas para a etapa estar completa.

	Issue => Report de bugs ou falhas de digitação.

	Pull Request => Solicitação de autorização para commitar em um repositório de terceiros. Primeiro, fazemos um fork
	do repositório principal para o nosso repositório, trabalhamos nas alterações que serão feitas, commitamos para o
	nosso git, e fazemos o pull request

	Comandos mais usados:
		git init => cria um novo repositório;
		git clone => copia a partir de um repositório remoto;
		git add => adiciona um ou vários arquivos ao working directory;
		git commit -m => confirma as alterações e envia o arquivo para o head, que sempre aponta para o último commit;
		git push origin master => envia as alterações ao repositório. O 'master' pode ser alterado para qualquer branch.
		git remote add origin <servidor> => conecta a um repositório que não foi clonado;
		git checkout -b <branch> => cria um novo branch;
		git checkout master => retorna para o master;
		git branch -d <branch> => remove o branch;
		git push origin <branch> => envia o branch para o repositório remoto;
		git pull => atualiza o repositório local, tentando fazer o merge com as atualizações remotas;
		git merge <branch> => tenta fazer o merge das alterações.
		    Conflitos são exibidos pelo git e devem ser tratados e novamente adicionados (git add <arquivo>);
		git diff <branch origem> <branch destino> => lista as alterações que foram feitas antes do merge;
		git tag => rotula um release 'git tag 1.0.0 1b2e1d63ff';
		git log => exibe o id de um commit;
		git checkout -- <arquivo> => sobrescreve alterações locais;



- Controle de acessos
	Public: Pode ser acessado por todas as classes;
	Private: Acessado somente pela classe que o criou ou através dos getters e setters;
	Protected: Acessado somente pelo package ao qual pertence. Pode ser acessado por outro package através da herança

- Statics
	O objeto é usado globalmente dentro da classe. Muito usado para contadores.
	O atributo static faz com que um objeto seja global, ou seja, pode ser acessado por todos os outros objetos
	    em uma classe
	Se a variável não for static, ela fica com uma cópia diferente para cada objeto.
- OOP
	Abstração
		Identidade =>o que é
		Propriedades => como é
		Métodos => o que faz
	Encapsulamento
		Propriedades do objeto são privadas. Só podem ser consultadas através do getter e setadas através do setter
	Herança
		Reaproveitamento de uma classe 'pai'
		estabelece uma relação de 'é um'
		classe 'cachorro' herda os atributos da classe 'animal', pois cachorro é um animal
	Polimorfismo
		Modificação do funcionamento interno de um método herdado de um objeto 'pai';
- Classes Abstratas
	Servem como modelo para as classes concretas. Podem conter código.
	As classes concretas devem implementar todos os métodos definidos na classe abstrata,
	ou se tornarão abstratas também. Os métodos abstratos não possuem implementação.
- Interface
	Uma interface é uma classe que contém especificações que serão usadas pelas outras classes.
	Ou seja, ela tem por objetivo criar um contrato que deverá ser obedecido nas classes onde for implementada.
	Os métodos criados na interface não têm corpo, apenas assinatura.

	Adicionados:
- Estruturas de dados (Map, HashMap, set, stack, queue)
    Map => Estrutura de dados com chave e valor. Map <k, v> map = new HashMap <>
        A classe HashMap é uma implementação da interface Map
    Set => É uma lista que não aceita elementos duplicados
    Stack => LIFO
    Queue => FIFO

- Exceções (Try catch)

- Acessos por referência e cópia.
    Referência => O acesso é feito à instância do objeto através do THIS.
    Cópia => Feita de várias formas:
        shallow copy (Interface Cloneable) => copia o endereço de memória do objeto.
        ou deep copy (Interface Cloneable) => copia toda a árvore do objeto.
- Mutable - Immutable
- Thread semáforos, synchronized